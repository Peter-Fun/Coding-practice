class Solution(object):
    def allPathsSourceTarget(self, graph):
        """
        :type graph: List[List[int]]
        :rtype: List[List[int]]
        """
        def dfs(vertex, target, cpath, paths):
            cpath.append(vertex) # arrived at the current vertex
            if vertex != target: # we haven't reached node n-1 yet
                for neighbor in graph[vertex]: # loop and go to all of the adjacent nodes
                    dfs(neighbor, target, cpath, paths) 
            else:
                paths.append(cpath[::]) # we finished a complete path
            cpath.pop()
        n = len(graph)
        start = 0
        paths = []
        for startn in graph[start]:
            dfs(startn, n - 1, [0], paths)
        return paths
